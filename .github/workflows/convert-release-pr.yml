name: convert-and-release

on:
  pull_request:
    types: [closed]
    branches:
      - develop
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  handle-develop-merge:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop' && startsWith(github.event.pull_request.title, 'chore(develop)')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Update PR label to tagged
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Try removing 'autorelease: pending' (if it exists)
            try {
              await github.rest.issues.removeLabel({
                issue_number: prNumber,
                owner,
                repo,
                name: "autorelease: pending"
              });
            } catch (error) {
              if (error.status !== 404) throw error; // ignore if label doesn't exist
            }

            // Add 'autorelease: tagged'
            await github.rest.issues.addLabels({
              issue_number: prNumber,
              owner,
              repo,
              labels: ["autorelease: tagged"]
            });

      - name: Reset develop to before merge
        run: |
          git fetch origin develop
          git checkout develop
          git push origin ${{ github.event.pull_request.merge_commit_sha }}^:develop --force
      
      - name: Squash merge develop into main with custom commit message
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          # Fetch latest branches
          git fetch origin
          git checkout main
          git merge --squash origin/develop

          # Commit with custom message (title + body)
          COMMIT_TITLE=$(echo "${{ github.event.pull_request.title }}" | sed 's/chore(develop):/chore(main):/')
          COMMIT_BODY="${{ github.event.pull_request.body }}"
          git commit -m "$COMMIT_TITLE" -m "$COMMIT_BODY"

          # Push the updated main branch
          git push origin main

  handle-main-merge:
    runs-on: ubuntu-latest
    needs: handle-develop-merge

    steps:
      - name: Extract tag from PR title
        id: extract
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          VERSION=$(echo "$TITLE" | grep -oP '\d+\.\d+\.\d+')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Tag develop
        run: |
          git fetch origin develop
          git tag ${{ steps.extract.outputs.version }} origin/develop
          git push origin ${{ steps.extract.outputs.version }}

      - name: Tag main
        run: |
          git fetch origin main
          git tag -f ${{ steps.extract.outputs.version }} origin/main
          git push -f origin ${{ steps.extract.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.extract.outputs.version }}
          generate_release_notes: true

